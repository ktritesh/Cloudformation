AWSTemplateFormatVersion: 2010-09-09

Description:  This template deploys a VPC, with a public and private subnets spread
  across two Availability Zones and defines EC2 instance with a security group that allows SSH traffic.

# The following metadata is used to group the parameters
Metadata:
  AWS::CloudFormation::Interface: 
    ParameterGroups:
      - 
        Label: 
          default: "VPC CIDR"
        Parameters: 
          - VpcCIDR
      - 
        Label: 
          default: "Subnet CIDR"
        Parameters:
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR

Parameters:
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.200.0.0/16
  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the first public subnet in the first Availability Zone
    Type: String
    Default: 10.200.1.0/24
  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the Second public subnet in the first Availability Zone
    Type: String
    Default: 10.200.2.0/24
  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the first private subnet in the Second Availability Zone
    Type: String
    Default: 10.200.3.0/24
  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the Second  private subnet in the Second  Availability Zone
    Type: String
    Default: 10.200.4.0/24

  SSHLocation:
    Description: The IP address range that can be used to access the web server using SSH.
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    Default: 0.0.0.0/0
    MaxLength: '18'
    MinLength: '9'
    Type: String
  
  DBInstanceID:
    Default: mysqldbinstance
    Description: My database instance
    Type: String
    MinLength: '1'
    MaxLength: '63'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: >-
      Must begin with a letter and must not end with a hyphen or contain two
      consecutive hyphens.
  DBName:
    Default: mysqldb1
    Description: My Sqldb RDS
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters.  
  DBInstanceClass:
    Default: db.t2.micro
    Description: DB instance class
    Type: String
    ConstraintDescription: Must select a valid DB instance type.
  DBAllocatedStorage:
    Default: '20'
    Description: The size of the database (GiB)
    Type: Number
    MinValue: '1'
    MaxValue: '20'
    ConstraintDescription: must be between 20 and 65536 GiB.

Resources:  
# Create VPC
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.200.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: VPC-02

# Create Internet Gateway  
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: VPC-02 Gateway

# Attach Internet Gateway to VPC
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

# Create first Public Subnet 
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: ap-south-1a
      CidrBlock: 10.200.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet1

# Create Second Public Subnet 
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: ap-south-1a
      CidrBlock: 10.200.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet2

# Create first Private Subnet 
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: ap-south-1b
      CidrBlock: 10.200.3.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet1

# Create second Private Subnet 
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: ap-south-1b
      CidrBlock: 10.200.4.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet2  

# Create Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Public Route Table2
      VpcId: !Ref VPC     
      
# Add a Public Routes to the Internet
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable      
      
# Associate Public Routes with first Public Subnet
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1   

# Associate Public Routes with second Public Subnet
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2 

# Create Private Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Private Route Table
      VpcId: !Ref VPC

# Associate Private Route Table with first Private Subnet   
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

# Associate Private Route Table with Second Private Subnet   
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

# Create Nat Gateway     
  NatGateway:
    Type: "AWS::EC2::NatGateway"
    DependsOn: NatPublicIP
    Properties: 
      AllocationId: !GetAtt NatPublicIP.AllocationId
      SubnetId: !Ref PublicSubnet1     

#Create NAT Public IP     
  NatPublicIP:
    Type: "AWS::EC2::EIP"
    DependsOn: VPC
    Properties:
      Domain: vpc
     
# Create Public Security Group
  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP/SSH on port 80/22
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Public Security Group2

# Create Private Security Group
  PrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP/SSH/ICMP/Custom TCP on port 80/22/All/8000
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 10.200.0.0/24
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 10.200.0.0/24
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 10.200.0.0/24
      - IpProtocol: tCP
        FromPort: 8000
        ToPort: 8000
        CidrIp: 10.200.0.0/24
      Tags:
        - Key: Name
          Value: Private Security Group2

#Create an Public Load Balancer
  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: PublicLoadBalancer
      Scheme: internet-facing
      SecurityGroups:
        - Ref: PublicSecurityGroup
      Subnets: 
        - !Ref PublicSubnet1
        - !Ref PrivateSubnet1

# Create Public Launch Configuration
  PublicLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-0de8fac4ababecf19
      SecurityGroups:
      - Ref: PublicSecurityGroup
      InstanceType: t2.micro

#Create a Public Listener on Port 80
  PublicListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - RedirectConfig:
            Host: '#{host}'
            Path: '/#{path}'
            Port: '443'
            Protocol: HTTPS
            StatusCode: HTTP_301
          Type: redirect
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 80
      Protocol: HTTP

# Create a Public Target Group
  PublicTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      HealthCheckEnabled: true
      TargetType: instance
      Matcher:
        HttpCode: 200,302
      Name: PublicTargetGroup
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Ref: VPC

#Create an Private Load Balancer
  PrivateLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: PrivateLoadBalancer
      Scheme: internal
      SecurityGroups:
        - Ref: PrivateSecurityGroup
      Subnets: 
        - !Ref PublicSubnet2
        - !Ref PrivateSubnet2
        
        

#Create a Private Listener on Port 80
  PrivateListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - RedirectConfig:
            Host: '#{host}'
            Path: '/#{path}'
            Port: '443'
            Protocol: HTTPS
            StatusCode: HTTP_301
          Type: redirect
      LoadBalancerArn: !Ref PrivateLoadBalancer
      Port: 80
      Protocol: HTTP

# Create a Private Target Group
  PrivateTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      HealthCheckEnabled: true
      TargetType: instance
      Matcher:
        HttpCode: 200,302
      Name: PrivateTargetGroup
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Ref: VPC

# Create Public Launch Configuration
  PublicLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-0de8fac4ababecf19
      SecurityGroups:
      - Ref: PublicSecurityGroup
      InstanceType: t2.micro

# Create Public Auto Scaling Group        
  PublicAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: 1
      MaxSize: 5
      DesiredCapacity: 1
      LaunchConfigurationName: !Ref PublicLaunchConfiguration
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      TargetGroupARNs:
      - !Ref PublicTargetGroup
      Tags:
        - Key: Name
          Value: Public AutoScaling Group
          PropagateAtLaunch: True

# Create Simple Scaling Up Policy for Public Auto Scaling Group
  PublicSimpleScalingUpPolicy: 
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AdjustmentType: ChangeInCapacity
      PolicyType: "SimpleScaling"
      Cooldown: 300
      AutoScalingGroupName: 
        Ref: PublicAutoScalingGroup
      ScalingAdjustment: 1

# Create Simple Scaling Down Policy for Public Auto Scaling Group
  PublicSimpleScalingDownPolicy: 
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AdjustmentType: ChangeInCapacity
      PolicyType: "SimpleScaling"
      Cooldown: 300
      AutoScalingGroupName: 
        Ref: PublicAutoScalingGroup
      ScalingAdjustment: -1

# Create Private Launch Configuration
  PrivateLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-087c7312cd2b30666
      SecurityGroups:
      - Ref: PrivateSecurityGroup
      InstanceType: t2.micro

# Create Private Auto Scaling Group        
  PrivateAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: 1
      MaxSize: 5
      DesiredCapacity: 1
      LaunchConfigurationName: !Ref PrivateLaunchConfiguration
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      TargetGroupARNs:
      - !Ref PrivateTargetGroup

# Create Simple Scaling Up Policy for Private Auto Scaling Group
  privateSimpleScalingUpPolicy: 
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AdjustmentType: ChangeInCapacity
      PolicyType: "SimpleScaling"
      Cooldown: 300
      AutoScalingGroupName: 
        Ref: PrivateAutoScalingGroup
      ScalingAdjustment: 1

# Create Simple Scaling Down Policy for Private Auto Scaling Group
  privateSimpleScalingDownPolicy: 
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AdjustmentType: ChangeInCapacity
      PolicyType: "SimpleScaling"
      Cooldown: 300
      AutoScalingGroupName: 
        Ref: PrivateAutoScalingGroup
      ScalingAdjustment: -1      